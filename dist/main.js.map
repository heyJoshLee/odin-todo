{"version":3,"file":"main.js","mappings":"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","sources":["webpack://odin-todo-list/./src/pageSection.js","webpack://odin-todo-list/./src/modal.js","webpack://odin-todo-list/./src/todoItem.js","webpack://odin-todo-list/./src/project.js","webpack://odin-todo-list/./src/newProjectForm.js","webpack://odin-todo-list/./src/index.js","webpack://odin-todo-list/./src/projectsContainer.js","webpack://odin-todo-list/./src/newTodoForm.js"],"sourcesContent":["const PageSection = () => {\n    const spawnElement = (tag, id, content, parent) => {\n        let element = document.createElement(tag);\n        if (id) { element.id = id }\n        element.textContent = content;\n        parent.appendChild(element);\n        return element;\n    }\n\n    const spawnElementWithClass = (tag, classToAdd, content, parent) => {\n        let element = document.createElement(tag);\n        element.classList.add(classToAdd)\n        element.textContent = content;\n        parent.appendChild(element);\n        return element;\n    }\n\n    const spawnImage = (src, parent) => {\n        const element = document.createElement('img');\n        element.src = src;\n        parent.appendChild(element);\n        return element;\n    }\n\n    const changeParent = function(element, newParent) { \n        element.remove();\n        newParent.append(element);\n    }\n\n    return {\n        spawnElement,\n        spawnElementWithClass,\n        spawnImage,\n        changeParent\n    }\n}\n\nexport default PageSection;","import PageSection from \"./pageSection\";\n\nconst Modal = () => {\n    const { spawnElement, changeParent, spawnImage } = PageSection();\n\n    let element;\n    let pageContainer = document.querySelector('#page-container');\n    let modalCloseButton;\n    let modalOpenButton;\n    let modalId;\n\n    const generateModalId = () => {\n        let currentNumberOfModals = document.querySelectorAll('.modal').length;\n        modalId = ++currentNumberOfModals;\n    }\n\n    const getModalDiv = () => {\n        if (!element) { element = createModal(); }\n        return element; \n    }\n\n    const getOpenButton = () => {\n        return modalOpenButton;\n    }\n\n    const getCloseButton = () => {\n        return modalCloseButton;\n    }\n\n    const renderOpenButton = (divToRenderTo) => {\n        if (document.querySelector(`#modal-${modalId}-open-button`)) {\n            modalOpenButton = document.querySelector(`#modal-${modalId}-open-button`); \n            modalOpenButton.classList.add('modal-open-button');\n        } else {\n            modalOpenButton = spawnImage('../src/images/plus.png', divToRenderTo);            \n            modalOpenButton.id =`'modal-${modalId}-open-button`;\n            modalOpenButton.classList.add('modal-open-button');\n        }\n        modalOpenButton.addEventListener('click', () => {\n            toggleModal();\n        });\n    }\n\n    const renderCloseButton = (divToRenderTo) => {\n        if (document.querySelector(`#modal-${modalId}-close-button`)) {\n            modalCloseButton = document.querySelector(`#modal-${modalId}-close-button`); \n            modalCloseButton.classList.add('modal-close-button');\n        } else {\n            modalCloseButton = spawnImage('../src/images/close.png', divToRenderTo);            \n            modalCloseButton.id =`'modal-${modalId}-close-button`;\n            modalCloseButton.classList.add('modal-close-button');\n        }\n        modalCloseButton.addEventListener('click', () => {\n            toggleModal();\n        });\n    }\n\n    const render = () => {\n        if (!element) { element = createModal(); }\n    }\n\n    const createModal = () => {\n        const newModal = spawnElement('div', `modal-${modalId}`, '', pageContainer);\n        newModal.classList.add('modal');\n        return newModal;\n    }\n\n    const toggleModal = () => {\n        if (!element) { element = createModal(); }\n\n        element.classList.toggle('hidden');\n    }\n\n    const close = () => {\n        element.classList.add('hidden');\n    }\n\n    generateModalId();\n\n    toggleModal();\n\n\n    return {\n        render,\n        getModalDiv,\n        changeParent,\n        getCloseButton,\n        close,\n        renderOpenButton,\n        renderCloseButton,\n        getOpenButton\n    }\n\n}\n\nexport default Modal;","import PageSection from \"./pageSection\";\nconst TodoItem = (newTitle, newDescription, newDueDate, newPriority, newNotes, newCompleted) => {\n    const { spawnElement, spawnElementWithClass, spawnImage } = PageSection();\n    let currentProjectDiv = document.querySelector('#current-project');\n    let element = document.createElement('div');\n    element.classList.add('todo');\n\n    let title = newTitle;\n    let description = newDescription;\n    let dueDate = newDueDate;\n    let priority = newPriority;\n    let notes = newNotes;\n    let completed = newCompleted;\n    let todoItemId;\n    let projectId;\n    let isEditing = false;\n    \n\n    const setProjectId = (newId) => {\n        projectId = newId;\n    }\n\n    const getElement = () => {\n        return element;\n    }\n\n    const getIsEditing = () => {\n        return isEditing;\n    }\n\n    const setIsEditing = (newIsEditing) => {\n        isEditing = newIsEditing;\n        render();\n    }\n\n    const getTitle = () => {\n        return title;\n    }\n\n    const getDescription = () => {\n        return description;\n    }\n\n    const getDueDate = () =>{\n        return dueDate;\n    }\n\n    const getPriority = () => {\n        return priority;\n    }\n\n    const getNotes = () => {\n        return notes;\n    }\n\n    const getCompleted = () => {\n        return completed;\n    }\n\n    const getProjectId = () => {\n        return projectId;\n    }\n\n    const getTodoItemId = () => {\n        return todoItemId;\n    }\n\n    const setTodoItemId = (newTodoItemId) => {\n        todoItemId = newTodoItemId;\n    }\n\n    const getPriorityLevelString = () => {\n            switch (priority) {\n                case '1': \n                    return 'low';\n                    break;\n                case '2':\n                    return 'medium';\n                    break;\n                case '3':\n                    return 'high';\n                    break;\n             }\n    }\n\n    const toggleCompleted = () => {\n        completed = !completed;\n    }\n\n    const saveNewValues = () => {\n        const newTitle = document.querySelector(`#todo-${todoItemId}-edit-title-input`).value;\n        const newPriority = document.querySelector(`#todo-${todoItemId}-edit-priority-input`).value;\n        const newDueDate = document.querySelector(`#todo-${todoItemId}-edit-due-date-input`).value;\n        const newNotes = document.querySelector(`#todo-${todoItemId}-edit-notes-input`).value;\n        const newDescription = document.querySelector(`#todo-${todoItemId}-edit-description-input`).value;\n        const newCompleted = document.querySelector(`#todo-${todoItemId}-edit-completed-input`).checked;\n        console.log(newCompleted)\n        title = newTitle;\n        priority = newPriority;\n        dueDate = newDueDate;\n        notes = newNotes;\n        description = newDescription;\n        completed = newCompleted;\n    }\n\n\n    const render = () => {\n        element.innerText = '';\n        const renderNormalTodoDiv = () => {\n            const todoHeading = spawnElementWithClass('div', 'todo-heading', '', element);\n            const todoitle = spawnElementWithClass('div', 'todo-title', getTitle(), todoHeading);\n            if (getCompleted()) { todoitle.classList.add('completed'); }\n\n            const priorityText = getPriorityLevelString();\n            const todoPriority = spawnElementWithClass('div','todo-priority', priorityText, todoHeading);\n            todoPriority.classList.add(priorityText)\n\n\n            const downArrow = spawnImage('../src/images/arrow-down.png', todoHeading);\n            downArrow.classList.add('expand');\n\n            const editingButton = spawnImage('../src/images/edit.png', todoHeading );\n            editingButton.classList.add('edit');\n            editingButton.addEventListener('click', () => {\n                isEditing = true;\n                render();\n            })\n\n            const todoBodyDiv = spawnElementWithClass('div','todo-body', '', element);\n\n            downArrow.addEventListener('click', () => {\n                todoBodyDiv.classList.toggle('expanded');\n            });\n\n            const todoDueDateContainer = spawnElementWithClass('div', 'todo-due-date-container', '', todoBodyDiv);\n            const todoDueDate = spawnElementWithClass('div','todo-due-date', getDueDate(), todoDueDateContainer);\n\n            spawnImage('../src/images/calendar.png', todoDueDateContainer);\n\n            const todoDescription = spawnElementWithClass('div','todo-description', getDescription(), todoBodyDiv);\n   \n            const todoNotes = spawnElementWithClass('div','todo-notes', getNotes(), todoBodyDiv);\n            const todoMarkAsDoneButton = spawnElement('div', '', '', todoBodyDiv);\n            todoMarkAsDoneButton.classList.add('mark-as-done-button');\n            todoMarkAsDoneButton.addEventListener('click', () => {\n                toggleCompleted();\n                render();\n            })\n            if (!completed) {\n                todoMarkAsDoneButton.textContent = 'Mark as done'\n            } else {\n                todoMarkAsDoneButton.classList.add('complete');\n                todoMarkAsDoneButton.textContent = 'Mark as incomplete'\n            }\n  \n\n        }\n\n        const renderEditingTodoDiv = () => {\n\n            const todoEditHeading = spawnElementWithClass('div', 'todo-edit-heading', '', element);\n            const todoEditTitleInput = spawnElement('input', `todo-${todoItemId}-edit-title-input`, '', todoEditHeading);\n            todoEditTitleInput.value = getTitle();\n\n            const todoEditPriorityInput = spawnElement('select', `todo-${todoItemId}-edit-priority-input`, '', todoEditHeading);\n            const optionLow = spawnElement('option', '', 'Low', todoEditPriorityInput);\n            optionLow.value = '1';\n            if (optionLow.value === getPriorityLevelString()) {\n                optionLow.selected = true;\n            }\n            const optionMedium = spawnElement('option', '', 'Medium', todoEditPriorityInput);\n            optionMedium.value = '2';\n            if (optionMedium.value === getPriorityLevelString()) {\n                optionMedium.selected = true;\n            }\n            const optionHigh = spawnElement('option', '', 'High', todoEditPriorityInput);\n            optionHigh.value = '3';\n            if (optionHigh.value === getPriorityLevelString()) {\n                optionHigh.selected = true;\n            }\n\n            const todoEditSaveIcon = spawnImage('../src/images/save.png', todoEditHeading);\n            todoEditSaveIcon.classList.add('save');\n            todoEditSaveIcon.addEventListener('click', () => {\n                isEditing = false;\n                saveNewValues();\n                render();\n            })\n\n\n            const todoEditBodyDiv = spawnElementWithClass('div', 'todo-edit-body', '', element);\n\n            const todoEditDueDateContainer = spawnElementWithClass('div', 'todo-edit-due-date-container', '', todoEditBodyDiv);\n\n\n            const todoEditDueDateContainerInput = spawnElement('input', `todo-${todoItemId}-edit-due-date-input`, '', todoEditDueDateContainer);\n            todoEditDueDateContainerInput.type = 'date';\n            todoEditDueDateContainerInput.value = getDueDate();\n\n\n            const todoEditDescriptionInput = spawnElement('textarea',`todo-${todoItemId}-edit-description-input`, getDescription(), todoEditBodyDiv);\n   \n            const todoNotes = spawnElement('textarea',`todo-${todoItemId}-edit-notes-input`, getNotes(), todoEditBodyDiv);\n\n            const todoEditCompletedLabel = spawnElement('label', `todo-${todoItemId}-edit-completed-label`, 'Completed', todoEditBodyDiv)\n            const todoEditCompletedInput = spawnElement('input', `todo-${todoItemId}-edit-completed-input`, '', todoEditBodyDiv)\n            todoEditCompletedInput.type = 'checkbox';\n            todoEditCompletedInput.checked = completed;\n        }\n\n        if (!isEditing) {\n            renderNormalTodoDiv();\n        } else {\n            renderEditingTodoDiv();\n        }\n    }\n\n    return {\n        getTitle,\n        getProjectId,\n        getDescription,\n        getDueDate,\n        getPriority,\n        getNotes,\n        getCompleted,\n        getTodoItemId,\n        setProjectId,\n        getIsEditing,\n        setIsEditing,\n        getElement,\n        setTodoItemId,\n        render\n    }\n}\n\nexport default TodoItem;","import PageSection from \"./pageSection\";\nimport TodoItem from \"./todoItem\";\nimport Modal from './modal';\nimport NewTodoForm from \"./newTodoForm\";\nconst Project = (newTitle, newDescription, newDueDate, newNotes, newCompleted) => {\n    const { spawnElementWithClass, spawnElement, spawnImage, changeParent } = PageSection();\n    let title = newTitle;\n    let description = newDescription;\n    let dueDate = newDueDate;\n    let notes = newNotes;\n    let completed = newCompleted;\n    let pageContainer;\n    let projectDiv;\n    let todoItems = [];\n    let projectsContainer;\n    let projectId;\n    let modal;\n    let createdTodoItems = 0;\n    let isEditing = false;\n\n    const addTodoItem = (itemToAdd) => {\n        itemToAdd.setProjectId(projectId);\n        itemToAdd.setTodoItemId(++createdTodoItems)\n        todoItems.push(itemToAdd);\n        render();\n    }\n\n    const setModal = (newModal) => {\n        modal = newModal;\n    }\n\n    const setProjectsContainer = (newProjectsContainer) => {\n        projectsContainer = newProjectsContainer;\n    }\n\n    const setProjectId = (newProjectId) => {\n        projectId = newProjectId.toString();\n    }\n\n    const getProjectId = () => {\n        return projectId;\n    }\n\n    const deleteProject = () => {\n        projectsContainer.deleteProjectById(projectId);\n    }\n\n    const saveNewValues = () => {\n        const newTitle = document.querySelector(`#project-${projectId}-edit-title-input`).value;\n        title = newTitle;\n    }\n    const render = () => {\n        if (!projectsContainer) {\n\n            return;\n        }\n        projectDiv = projectsContainer.getCurrentProjectDiv();\n        const renderHeaderSection = () => {\n            if (!projectDiv) { projectDiv = spawnElement('div', 'current-project', '', pageContainer); }\n            projectDiv.textContent = '';\n\n            const renderNormallHeaderSection = () => {\n                let headerDiv = spawnElementWithClass('div', 'project-header', '', projectDiv);\n                spawnElement('h1', '', title, headerDiv);\n                const editButton = spawnImage('../src/images/edit.png', headerDiv);\n                editButton.classList.add('edit');\n                editButton.addEventListener('click', () => {\n                    isEditing = true;\n                    render();\n                })\n    \n                let todosHeadingContainer = spawnElement('div', 'todos-heading-container', '', projectDiv);\n                spawnElement('h2', '', 'Todos', todosHeadingContainer);\n                if (projectsContainer) { projectsContainer.getNewTodoFormModal().renderOpenButton(todosHeadingContainer); }\n        \n                if (modal) {\n                    modal.renderOpenButton(todosHeadingContainer);\n                }\n            }\n\n            const renderEditingHeaderSection = () => {\n                let headerDiv = spawnElementWithClass('div', 'project-header', '', projectDiv);\n                let projectEditTitleInput = spawnElement('input', `project-${projectId}-edit-title-input`, '', headerDiv);\n                projectEditTitleInput.value = title;\n\n                const projectEditSaveIcon = spawnImage('../src/images/save.png', headerDiv);\n                projectEditSaveIcon.classList.add('save');\n                projectEditSaveIcon.addEventListener('click', () => {\n                    isEditing = false;\n                    saveNewValues();\n                    render();\n                })\n\n\n\n                let deleteButton = spawnElement('div', `${projectId}-delete-button`, 'delete', headerDiv);\n                deleteButton.classList.add('project-delete-button');\n                deleteButton.addEventListener('click', () => {\n                    let wantToDelete = confirm('Are you sure you want to delete this project and all related todos?');\n                    if (wantToDelete) { deleteProject() }\n                });\n            }\n\n            if (!isEditing) {\n                renderNormallHeaderSection();\n            } else {\n                renderEditingHeaderSection();\n            }\n\n\n        }\n\n        const renderTodoItems = () => {\n            todoItems.forEach((todoItem) => {\n                changeParent(todoItem.getElement(), projectDiv);\n                todoItem.render();\n            })\n        }\n    \n        pageContainer = document.querySelector('#page-container');\n        renderHeaderSection();\n        renderTodoItems();\n    }\n\n\n    render();\n\n    return {\n        title,\n        description,\n        dueDate,\n        completed,\n        projectId,\n        notes,\n        addTodoItem,\n        setProjectsContainer,\n        setProjectId,\n        getProjectId,\n        setModal,\n        render\n    }\n}\n\nexport default Project;","import PageSection from \"./pageSection\";\nimport Project from './project';\n\nconst NewProjectForm = () => {\n    const { spawnElement, changeParent } = PageSection();\n    let pageContainer;\n    let projectsContainer;\n    let form = document.createElement('form');\n    let titleInput;\n    let descriptionInput;\n    let dueDateInput;\n    let priorityInput;\n    let completedInput;\n    let modal;\n\n    const setProjectsContainer = (newProjectsContainer) => {\n        projectsContainer = newProjectsContainer;\n    }\n\n    const render = () => {\n        pageContainer = document.querySelector('#page-container');\n        form.id = 'new-project-form'\n        if (modal) { modal.renderCloseButton(form); }\n\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n            const newProject = createNewProject(getFormValues().title,\n                            getFormValues().description,\n                            getFormValues().dueDate,\n                            getFormValues().priority,\n                            getFormValues().completed\n                            )\n            projectsContainer.addProject(newProject);\n            clearForm();\n            closeModal();\n        });\n\n        spawnElement('h2', '', 'New Project', form);\n\n        const titleLabel = spawnElement('label', '', 'Project Title', form);\n        titleLabel.htmlFor = 'projectTitleInput';\n        titleInput = spawnElement('input', 'projectTitleInput', '', form);\n        titleInput.name = \"title\";\n\n        const descriptionLabel = spawnElement('label', '', 'Project Description', form);\n        descriptionLabel.htmlFor = 'projectDescriptionInput';\n        descriptionInput = spawnElement('textarea', 'projectDescriptionInput', '', form);\n        descriptionInput.name = \"description\";\n\n        const dueDateLabel = spawnElement('label', '', 'Project dueDate', form);\n        dueDateLabel.htmlFor = 'projectDueDateInput';\n        dueDateInput = spawnElement('input', 'projectDueDateInput', '', form);\n        dueDateInput.type = 'date';\n        dueDateInput.name = \"dueDate\";\n\n\n        const priorityLabel = spawnElement('label', '', 'Project Priority', form);\n        priorityLabel.htmlFor = 'projectPriorityInput';\n        priorityInput = spawnElement('select', 'projectPriorityInput', '', form);\n        const optionLow = spawnElement('option', '', 'Low', priorityInput);\n        optionLow.value = 'low';\n        const optionMedium = spawnElement('option', '', 'Medium', priorityInput);\n        optionMedium.value = 'medium';\n        const optionHigh = spawnElement('option', '', 'High', priorityInput);\n        optionHigh.value = 'high';\n\n        const completedLabel = spawnElement('label', '', 'Project completed', form);\n        completedLabel.htmlFor = 'projectCompletedInput';\n        completedInput = spawnElement('input', 'projectCompletedInput', '', form);\n        completedInput.type = 'checkbox';\n        completedInput.name = \"completed\";\n\n        spawnElement('button', '', 'Add New Project', form );\n    }\n\n    const getFormValues = () => {\n        return {\n            title: document.querySelector('#projectTitleInput').value,\n            description: document.querySelector('#projectDescriptionInput').value,\n            dueDate: document.querySelector('#projectDueDateInput').value,\n            priority: document.querySelector('#projectPriorityInput').value,\n            completed: document.querySelector('#projectCompletedInput').value\n        }\n    }\n\n    const createNewProject = (title, description, dueDate, priority, completed) => {\n         return Project(title, description, dueDate, priority, completed);\n    }\n\n    const getFormDiv = () => {\n        return form;\n    }\n\n    const clearForm = () => {\n        titleInput.value = \"\";\n        descriptionInput.value = \"\";\n        dueDateInput.value = \"\";\n        priorityInput.value = \"\";\n        completedInput.value = \"\";\n    }\n\n    const closeModal = () => {\n        console.log(modal)\n        if (modal) {\n            modal.close(); \n        }\n\n    }\n\n    const setModal = function (newModal) {\n        modal = newModal;\n        changeParent(form, modal.getModalDiv());\n    }\n\n    return {\n        render,\n        changeParent,\n        setModal,\n        getFormDiv,\n        setProjectsContainer\n    }\n}\n\nexport default NewProjectForm;","import ProjectsContainer from './projectsContainer';\nimport NewProjectForm from './newProjectForm';\nimport Project from './project';\nimport TodoItem from './todoItem';\nimport Modal from './modal';\nimport NewTodoForm from './newTodoForm';\n\n\n\nfunction generateTestData () {\n    const newTodoItem1 = TodoItem('cool title 1', 'description', '2011-09-29', '1', 'notes', 'completed');\n    const newProject1 = Project('do this 1', 'do this thing', '2011-09-29', 'somet notes go here', false);\n    const newTodoItem4 = TodoItem('cool title 4', 'description', '2011-09-29', '2', 'notes', 'completed');\n\n    projectsContainer.addProject(newProject1);\n    \n    newProject1.addTodoItem(newTodoItem1);\n    newProject1.addTodoItem(newTodoItem4);\n    \n    \n    const newTodoItem2 = TodoItem('cool title 2', 'description', '2011-09-29', '3', 'notes', 'completed');\n    const newProject2 = Project('do this 2', 'do this thing', '2011-09-29', 'somet notes go here', false);\n    \n    projectsContainer.addProject(newProject2);\n    \n    newProject2.addTodoItem(newTodoItem2);\n    \n    const newTodoItem3 = TodoItem('cool title 3', 'description', '2011-09-29', '1', 'notes', 'completed');\n    const newProject3 = Project('do this 3', 'do this thing', '2011-09-29', 'somet notes go here', false);\n    const newTodoItem5 = TodoItem('cool title 5', 'description', '2011-09-29', '1', 'notes', 'completed');\n    const newTodoItem6 = TodoItem('cool title 6', 'description', '2011-09-29', '1', 'notes', 'completed');\n\n\n    \n    projectsContainer.addProject(newProject3);\n    \n    newProject3.addTodoItem(newTodoItem5);\n    newProject3.addTodoItem(newTodoItem6);\n\n    newTodoItem6.setIsEditing(true);\n    newProject3.render()\n}\n\nconst projectsContainer = ProjectsContainer();\nprojectsContainer.getNewProjectForm().setProjectsContainer(projectsContainer);\nprojectsContainer.getNewTodoForm().setProjectsContainer(projectsContainer);\n\ngenerateTestData();\n\nprojectsContainer.render();\n\n\n","import PageSection from \"./pageSection\";\nimport Project from \"./project\";\nimport Modal from \"./modal\";\nimport NewTodoForm from \"./newTodoForm\";\nimport NewProjectForm from \"./newProjectForm\";\n\nconst ProjectTitlesContainer = function () {\n    const { spawnElement, spawnElementWithClass } = PageSection();\n    const pageContainer = document.querySelector('#page-container');\n    let projectListContainerDiv = spawnElement('div', 'project-titles-container', 'content', pageContainer);\n    let currentProjectDiv = spawnElement('div', 'current-project', '', pageContainer);\n    let currentProject;\n    let currentProjectContainer;\n    let idToAddToNewProject = 0;\n\n    let newProjectForm = NewProjectForm();\n    let newProjectFormModal = Modal();\n    \n    newProjectForm.setModal(newProjectFormModal);\n    newProjectForm.render();\n\n    let newTodoForm = NewTodoForm();\n    let newTodoFormModal = Modal();\n\n    newTodoForm.setModal(newTodoFormModal);\n    newTodoForm.render();\n\n\n    const projects = [];\n\n    if (projects.length > 0) {\n        currentProject = projects[0];\n    }\n\n    const getNewProjectForm = () => {\n        return newProjectForm;\n    }\n\n    const getCurrentProjectDiv = () => {\n        return currentProjectDiv;\n    }\n\n\n    const getProjectListContainerDiv = () => {\n        return projectListContainerDiv;\n    }\n\n    const getNewTodoForm = () => {\n        return newTodoForm;\n    }\n\n    const getCurrentProject = () => {\n        return currentProject;\n    }\n\n    const setNewProjectFormModal = (modalToSet) => {\n        newProjectFormModal = modalToSet;\n    }\n\n    const getNewProjectFormModal = () => {\n        return newProjectFormModal;\n    }\n\n    const getNewTodoFormModal = () => {\n        return newTodoFormModal;\n    }\n\n    const renderProjectList = () => {\n        const projectList = spawnElement('ul', 'project-list', '', projectListContainerDiv);\n        projects.forEach(project => renderProject(projectList, project));\n    }\n\n    const createProject = function (projectToAdd) {\n        projectToAdd.setProjectId(++idToAddToNewProject);\n        projectToAdd.setProjectsContainer(this);\n        projects.push(projectToAdd);\n        projectToAdd.render();\n        currentProject = projectToAdd;\n        render();\n    }\n\n    const addProject = function(projectToAdd) {\n        createProject.call(this, projectToAdd);\n        setCurrentProject(projectToAdd); \n    }\n\n    const renderProject = (projectList, project) => {\n        const newElement = spawnElementWithClass('li', 'project-link', '', projectList);\n        newElement.dataset.projectId = project.getProjectId();\n        spawnElementWithClass('div', 'project-title-link', project.title, newElement);\n        if (currentProject && currentProject.getProjectId() === project.getProjectId()) {\n            newElement.classList.add('current-project-nav');\n        }\n        newElement.addEventListener('click', () => {\n            setCurrentProjectById(newElement.dataset.projectId);\n            if (!currentProjectContainer) {\n                currentProjectContainer = document.querySelector('#current-project');\n            }\n            currentProjectContainer.textContent = '';\n            currentProject.render();\n            render();\n        })\n    }\n\n    const setCurrentProjectById = (id) => {\n        currentProject = projects.find((project) => {\n            return project.getProjectId() === id;\n        });\n\n    }\n\n    const setCurrentProject = (newCurrentProject) => {\n        currentProject = newCurrentProject;\n        newTodoForm.render();\n    }\n\n    const deleteProjectById = (id) => {\n        let projectToDelete;\n        projectToDelete = projects.find((project) => {\n            return project.getProjectId() === id;\n        })\n        let indexToDelete = projects.indexOf(projectToDelete);\n        projects.splice(indexToDelete, 1);\n        currentProject = projects[0];\n        currentProject.render()\n        render();\n    }\n\n    const render = () => {       \n        projectListContainerDiv.textContent = '';\n\n        const projectLegendAndButtonContainer = spawnElement('div', 'project-legend-and-button-container', '', projectListContainerDiv);\n        spawnElement('div', 'projects-list-header', 'Projects', projectLegendAndButtonContainer);\n        if (newProjectFormModal) {\n            newProjectFormModal.renderOpenButton(projectLegendAndButtonContainer);\n        }\n\n        renderProjectList();\n        newTodoForm.render();\n    }\n\n    return {\n        render,\n        projects,\n        addProject,\n        setNewProjectFormModal,\n        getNewProjectFormModal,\n        deleteProjectById,\n        getCurrentProject,\n        getNewProjectForm,\n        getNewTodoFormModal,\n        getNewTodoForm,\n        getCurrentProjectDiv,\n        getProjectListContainerDiv\n    }\n}\n\nexport default ProjectTitlesContainer;","import PageSection from \"./pageSection\";\nimport TodoItem from './todoItem';\nconst NewTodoForm = () => {\n    const { spawnElement, changeParent } = PageSection();\n    let projectsContainer;\n    let form = document.createElement('form');\n    form.id = 'new-todo-form'\n\n    let titleInput;\n    let descriptionInput;\n    let dueDateInput;\n    let notesInput;\n    let priorityInput;\n    let completedInput;\n    let modal;\n\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        createNewTodoItem(getFormValues().title,\n            getFormValues().description,\n            getFormValues().dueDate,\n            getFormValues().priority,\n            getFormValues().notes,\n            getFormValues().completed\n        )\n        console.log('submit')\n        clearForm();\n        closeModal();\n    });\n\n    const setProjectsContainer = (newProjectsContainer) => {\n        projectsContainer = newProjectsContainer;\n        render();\n    }\n\n    const render = () => {\n        form.textContent = '';\n        if (modal) { modal.renderCloseButton(form); }\n\n  \n\n\n        spawnElement('h2', '', 'New todo for', form);\n        if (projectsContainer && projectsContainer.getCurrentProject()) {\n           spawnElement('h3', '', projectsContainer.getCurrentProject().title, form);\n        }\n\n\n        const titleLabel = spawnElement('label', '', 'Title', form);\n        titleLabel.htmlFor = 'todo-title-input';\n        titleInput = spawnElement('input', 'todo-title-input', '', form);\n        titleInput.name = \"title\";\n\n        const descriptionLabel = spawnElement('label', '', 'Description', form);\n        descriptionLabel.htmlFor = 'todo-description-input';\n        descriptionInput = spawnElement('textarea', 'todo-description-input', '', form);\n        descriptionInput.name = \"description\";\n\n        const dueDateLabel = spawnElement('label', '', 'Due Date', form);\n        dueDateLabel.htmlFor = 'todo-due-date-input';\n        dueDateInput = spawnElement('input', 'todo-due-date-input', '', form);\n        dueDateInput.type = 'date';\n        dueDateInput.name = \"dueDate\";\n\n\n        const notesLabel = spawnElement('label', '', 'Notes', form);\n        notesLabel.htmlFor = 'todo-notes-input';\n        notesInput = spawnElement('textarea', 'todo-notes-input', '', form);\n        notesInput.name = \"notes\";\n\n        const priorityLabel = spawnElement('label', '', 'Priority', form);\n        priorityLabel.htmlFor = 'todo-priority-input';\n        priorityInput = spawnElement('select', 'todo-priority-input', '', form);\n        const optionLow = spawnElement('option', '', 'Low', priorityInput);\n        optionLow.value = 'low';\n        const optionMedium = spawnElement('option', '', 'Medium', priorityInput);\n        optionMedium.value = 'medium';\n        const optionHigh = spawnElement('option', '', 'High', priorityInput);\n        optionHigh.value = 'high';\n\n\n        const completedLabel = spawnElement('label', '', 'Completed?', form);\n        completedLabel.htmlFor = 'todo-completed-input';\n        completedInput = spawnElement('input', 'todo-completed-input', '', form);\n        completedInput.type = 'checkbox';\n        completedInput.name = \"completed\";\n\n        spawnElement('button', '', 'Add New Todo', form);\n    }\n\n    const getFormValues = () => {\n        return {\n            title: document.querySelector('#todo-title-input').value,\n            description: document.querySelector('#todo-description-input').value,\n            dueDate: document.querySelector('#todo-due-date-input').value,\n            notes: document.querySelector('#todo-notes-input').value,\n            priority: document.querySelector('#todo-priority-input').value,\n            completed: document.querySelector('#todo-completed-input').value\n        }\n\n    }\n\n    const createNewTodoItem = (title, description, dueDate, priority, completed) => {\n        let newItem =  TodoItem(title, description, dueDate, priority, completed);\n        projectsContainer.getCurrentProject().addTodoItem(newItem);\n\n    }\n\n    const getFormDiv = () => {\n        return form;\n    }\n\n    const clearForm = () => {\n        titleInput.value = \"\";\n        descriptionInput.value = \"\";\n        dueDateInput.value = \"\";\n        priorityInput.value = \"\";\n        completedInput.value = \"\";\n    }\n\n    const closeModal = () => {\n        if (modal) {\n            modal.close(); \n        }\n    }\n\n    const setModal = function (newModal) {\n        modal = newModal;\n        changeParent(form, modal.getModalDiv());\n    }\n\n    return {\n        render,\n        changeParent,\n        setModal,\n        getFormDiv,\n        setProjectsContainer\n    }\n}\n\nexport default NewTodoForm;"],"names":["spawnElement","tag","id","content","parent","element","document","createElement","textContent","appendChild","spawnElementWithClass","classToAdd","classList","add","spawnImage","src","changeParent","newParent","remove","append","modalCloseButton","modalOpenButton","modalId","pageContainer","querySelector","createModal","newModal","toggleModal","toggle","currentNumberOfModals","querySelectorAll","length","generateModalId","render","getModalDiv","getCloseButton","close","renderOpenButton","divToRenderTo","addEventListener","renderCloseButton","getOpenButton","newTitle","newDescription","newDueDate","newPriority","newNotes","newCompleted","todoItemId","projectId","title","description","dueDate","priority","notes","completed","isEditing","getTitle","getDescription","getDueDate","getNotes","getCompleted","getPriorityLevelString","innerText","todoEditHeading","value","todoEditPriorityInput","optionLow","selected","optionMedium","optionHigh","todoEditSaveIcon","checked","console","log","saveNewValues","todoEditBodyDiv","todoEditDueDateContainer","todoEditDueDateContainerInput","type","todoEditCompletedInput","renderEditingTodoDiv","todoHeading","todoitle","priorityText","downArrow","editingButton","todoBodyDiv","todoDueDateContainer","todoMarkAsDoneButton","renderNormalTodoDiv","getProjectId","getPriority","getTodoItemId","setProjectId","newId","getIsEditing","setIsEditing","newIsEditing","getElement","setTodoItemId","newTodoItemId","projectDiv","projectsContainer","modal","todoItems","createdTodoItems","getCurrentProjectDiv","headerDiv","projectEditSaveIcon","deleteButton","confirm","deleteProjectById","renderEditingHeaderSection","editButton","todosHeadingContainer","getNewTodoFormModal","renderNormallHeaderSection","renderHeaderSection","forEach","todoItem","addTodoItem","itemToAdd","push","setProjectsContainer","newProjectsContainer","newProjectId","toString","setModal","titleInput","descriptionInput","dueDateInput","priorityInput","completedInput","form","getFormValues","e","preventDefault","newProject","addProject","htmlFor","name","getFormDiv","currentProject","currentProjectContainer","projectListContainerDiv","currentProjectDiv","idToAddToNewProject","newProjectForm","newProjectFormModal","newTodoForm","notesInput","createNewTodoItem","clearForm","closeModal","getCurrentProject","newItem","newTodoFormModal","projects","createProject","projectToAdd","this","setCurrentProjectById","find","project","projectLegendAndButtonContainer","projectList","newElement","dataset","renderProject","renderProjectList","call","setNewProjectFormModal","modalToSet","getNewProjectFormModal","projectToDelete","indexToDelete","indexOf","splice","getNewProjectForm","getNewTodoForm","getProjectListContainerDiv","newTodoItem1","newProject1","newTodoItem4","newTodoItem2","newProject2","newProject3","newTodoItem5","newTodoItem6","generateTestData"],"sourceRoot":""}